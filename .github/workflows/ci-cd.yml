name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]

env:
  IMAGE_NAME: pizzaria-api

jobs:
  ci:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.docker_tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List files after checkout
        run: ls -lR

      - name: Check package.json presence
        run: |
          if [ ! -f ./API/package.json ]; then
            echo "ERROR: ./API/package.json NOT FOUND!"
            exit 1
          else
            echo "Found ./API/package.json"
            cat ./API/package.json
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./API/package-lock.json

      - name: Clean node_modules (opcional)
        run: rm -rf node_modules
        working-directory: ./API

      - name: Install dependencies
        run: npm install
        working-directory: ./API

      - name: Run tests
        run: npm test
        working-directory: ./API

      - name: Run lint
        run: npm run lint
        working-directory: ./API

      - name: Get version from package.json
        id: package_version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./API

      - name: Set Docker tag
        id: docker_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${{ steps.package_version.outputs.current-version }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Show version for debug
        run: echo "Docker tag is ${{ steps.docker_tag.outputs.tag }}"

      - name: Fail if version is empty
        run: |
          if [ -z "${{ steps.docker_tag.outputs.tag }}" ]; then
            echo "ERROR: Tag not found!"
            exit 1
          fi

      - name: Validate DockerHub secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "ERROR: DockerHub secrets not set!"
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./API
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.docker_tag.outputs.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  cd:
    needs: ci
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Deploy to Render (main or tag)
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${{ needs.ci.outputs.version }}"
          fi
          echo "Deploying image with tag: $TAG"
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{\"clearCache\": true, \"imageUrl\": \"${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG\"}"

  notify_failure:
    needs: [ci, cd]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send email on failure
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸš¨ [${{ github.repository }}] Falha no pipeline CI/CD"
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: |
            O pipeline CI/CD falhou no repositÃ³rio ${{ github.repository }}!
            Branch/Tag: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Veja detalhes em: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
